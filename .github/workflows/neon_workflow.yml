name: Neon and Vercel Deployment Workflow

on:
  push:
    branches:
      - main

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    steps:
      - name: Get Branch Name
        id: branch_name
        uses: tj-actions/branch-names@v8

  check_branch_exists:
    name: Check if Neon Branch Exists
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check Neon Branch
        id: check_branch
        run: |
          BRANCH_NAME="neon-deployment-${{ needs.setup.outputs.branch }}"
          if neonctl branch list --project-id ${{ vars.NEON_PROJECT_ID }} | grep -q $BRANCH_NAME; then
            echo "Branch exists"
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "Branch does not exist"
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

  create_neon_branch:
    name: Create or Reuse Neon Branch for Deployment
    needs: [setup, check_branch_exists]
    if: env.branch_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          username: "neondb_owner"
          parent: deployment
          branch_name: neon-deployment/${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run Migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"

  deploy_to_vercel:
    name: Deploy to Vercel
    needs: create_neon_branch
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./ # Adjust based on your project structure

  delete_neon_branch:
    name: Delete Neon Branch
    needs: [setup, create_neon_branch]
    if: ${{ always() }} # Always run this job, regardless of previous job success
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        if: env.branch_exists == 'true'
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: neon-deployment-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  recreate_neon_branch:
    name: Recreate Neon Branch
    needs: delete_neon_branch
    if: failure() && env.branch_exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Recreate Neon Branch
        id: recreate_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          username: "neondb_owner"
          parent: deployment
          branch_name: neon-deployment/${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run Migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: "${{ steps.recreate_neon_branch.outputs.db_url_with_pooler }}"
