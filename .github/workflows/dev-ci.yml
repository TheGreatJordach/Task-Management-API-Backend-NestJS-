name: Dev CI Pipeline

on:
  push:
    branches:
      - dev

jobs:
  validate-env:
    name: Load and Validate Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Check environment variables
        run: |
          echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}"
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}"
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}"
          echo "DATASOURCE_DATABASE=${{ secrets.DATASOURCE_DATABASE }}"
          # Add more checks as needed
        env:
          DATASOURCE_HOST: ${{ secrets.DATASOURCE_HOST }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_DATABASE: ${{ secrets.DATASOURCE_DATABASE }}
          # Add Swagger Variables
          MIT_LICENCE_URL: ${{ secrets.MIT_LICENCE_URL }}
          SWAGGER_SERVER: ${{ secrets.SWAGGER_SERVER }}
          SWAGGER_TITLE: ${{ secrets.SWAGGER_TITLE }}
          SWAGGER_PATH: ${{ secrets.SWAGGER_PATH }}
          API_PREFIX: ${{ secrets.API_PREFIX }}
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: validate-env
    if: success() # Ensure this job only runs if 'validate-env' is successful
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn lint
## Added
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Run unit tests
        run: yarn run test

      - name: Run e2e tests
        run: yarn run test:e2e


  test:
    name: Run Unit Tests and Collect Coverage
    runs-on: ubuntu-latest
    needs: validate-env
    if: success() # Ensure this job only runs if 'validate-env' is successful
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run Jest tests with coverage
        run: npx jest --coverage      # Alternative : yarn test:cov
      - name: Upload coverage to CodeCov
        if: ${{ !cancelled() }}
        # codecov/test-results-action@v1
        uses: codecov/codecov-action@v4
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./coverage/lcov.info
            flags: unittests
            name: codecov-umbrella
            fail_ci_if_error: true


  sonarcloud:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    needs: test
    if: success() # Run only if the test job is successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full depth is recommended for accurate SonarCloud analysis

      - name: Install dependencies
        run: yarn install

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  auto_merge:
    name: Auto-Merge Dev into Main if All Pass
    runs-on: ubuntu-latest
    needs: [lint, test, sonarcloud]
    steps:
      - name: Checkout the dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
      - name: Merge dev into main
        run: |
          git checkout main
          git merge dev
      - name: Push merge to main
        run: |
          git push origin main
