name: Dev CI Pipeline

on:
  push:
    branches:
      - dev

jobs:
  validate-env:
    name: Load and Validate Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Check environment variables
        run: |
          echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}"
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}"
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}"
          echo "DATASOURCE_DATABASE=${{ secrets.DATASOURCE_DATABASE }}"
          echo "DATABASE_URL"=${{ secrets.DATABASE_URL }}
          # Add more checks as needed
        env:
          DATASOURCE_HOST: ${{ secrets.DATASOURCE_HOST }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_DATABASE: ${{ secrets.DATASOURCE_DATABASE }}
          # Add Swagger Variables
          MIT_LICENCE_URL: ${{ secrets.MIT_LICENCE_URL }}
          SWAGGER_SERVER: ${{ secrets.SWAGGER_SERVER }}
          SWAGGER_TITLE: ${{ secrets.SWAGGER_TITLE }}
          SWAGGER_PATH: ${{ secrets.SWAGGER_PATH }}
          API_PREFIX: ${{ secrets.API_PREFIX }}

    ## Added
  build:
      name: Build & Test project
      runs-on: ubuntu-latest
      needs: validate-env
      if : success() # Ensure env variable as loaded

      steps:
        - name: Checkout code
          # Set up Node.js environment
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'

       # Cache node_modules
        - name: Cache dependencies
          uses: actions/cache@v3
          with:
           path: |
               node_modules
           key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
           restore-keys: |
                ${{ runner.os }}-node-

        # Install dependencies (if cache is not hit, it will install them)
        - name: Install dependencies
          run: yarn install
        # Run your build and tests
        - name: Run unit tests
          run: yarn run test

        - name: Run e2e tests
          run: yarn run test:e2e

  coverage:
    name: Run Unit Tests and Collect Coverage
    runs-on: ubuntu-latest
    needs: build
    if: success() # Ensure this job only runs if 'validate-env' is successful
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run Jest tests with coverage
        run:  yarn run test:cov     # Alternative : yarn test:cov

     # Upload the coverage to CodeCov
      - name: Upload coverage to CodeCov
        if: ${{ !cancelled() }}
        # codecov/test-results-action@v1 | codecov/codecov-action@v4
        uses: codecov/test-results-action@v1
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
           # files: ./coverage/lcov.info
           # flags: unittests
           # name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: coverage
    if: success() # Ensure the build is clean
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn lint         # fail_ci_if_error: true


  auto_merge:
    name: Merge Request Dev to Main # if All Pass
    runs-on: ubuntu-latest
    needs: [ lint, coverage,build ]
    steps:
      - name: Checkout the dev branch
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Checkout the main branch
        run: |
          git fetch origin main
          git checkout main
          git pull origin main

      - name: Authenticate GitHub CLI with PAT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }} # Use your personal access token here
        run: |
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Create Pull Request
        run: |
          gh pr create --base main --head dev --title "Merge Dev into Main" --body "This pull request merges changes from dev."
