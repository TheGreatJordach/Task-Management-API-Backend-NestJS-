name: Main Deployment Pipeline

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:

  validate-env:
    name: Load and Validate Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Check environment variables
        run: |
          echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}"
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}"
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}"
          echo "DATASOURCE_DATABASE=${{ secrets.DATASOURCE_DATABASE }}"
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          echo "APP_PORT=${{ secrets.APP_PORT }}"
          echo "VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}"
          echo "SWAGGER_PATH=${{ secrets.SWAGGER_PATH }}"

  sonarcloud:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    needs: validate-env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: yarn install

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=thegreatjordach
            -Dsonar.projectKey=TheGreatJordach_Task-Management-API-Backend-NestJS-
            -Dsonar.sources=src/
            -Dsonar.test.exclusions=**/*.spec.ts
            -Dsonar.tests=src/
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  setup:
    name: Setup | Neon workflow
    runs-on: ubuntu-latest
    needs: validate-env
    if: success()
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    steps:
      - name: Get Branch Name
        id: branch_name
        uses: tj-actions/branch-names@v8

  deploy_to_neon:
    name: Deploy to Neon Using Deployment Branch
    needs: setup
    if: success()
    runs-on: ubuntu-latest
    steps:
      # STEP-1: Create a new Branch for deployment
      - name: Use Neon Deployment Branch
        id: use_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          username: "Tasks_owner"
          parent: main
          database: Tasks
          branch_name: Task-deployment  # <-------------------- Add the branch name to be created
          api_key: ${{ secrets.NEON_API_KEY }}

      # STEP-2: Run Migration
      - name: Check Database Connection and Run Migration
        run: |
          # Check if DATABASE_URL is set
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "DATABASE_URL is not set. Cannot proceed with migration."
            exit 1
          fi

          # Test if the database is reachable
          PGPASSWORD=$(echo "${{ secrets.DATABASE_URL }}" | sed -n 's/.*:\/\/*:\([^@]*\).*/\1/p') \
          psql $(echo "${{ secrets.DATABASE_URL }}" | sed -n 's/\(.*@\)\(.*\)\/.*/\2/p') -c '\q'

          if [ $? -ne 0 ]; then
            echo "Cannot connect to the database. Please check the connection settings."
            exit 1
          fi

          # Run the migration if everything is okay
          yarn run db:migrate
        env:
          DATABASE_URL: "${{ secrets.DATABASE_URL }}"


  # STEP-3: if no error on Migration Ok then Deploy to vercel
  deploy_to_vercel:
    name: Deploy to Vercel
    needs: deploy_to_neon
    if : success()
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./ # Update as necessary

  build:
    # STEP-4: if Deploy to Vercel Ok, then Deploy the docs
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: deploy_to_vercel
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: yarn install

      - name: Generate documentation
        run: yarn run docs

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  delete_neon_branch:
    # STEP-5: Wait for the end of the process and clean up regardless of success or failure
    name: Delete Neon Deployment Branch
    runs-on: ubuntu-latest
    needs: [ deploy_to_neon, deploy_to_vercel, build ] # Depends on previous jobs
    if: always() # Run regardless of success or failure
    steps:
      - name: Delete Neon Deployment Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          api_key: ${{ secrets.NEON_API_KEY }}
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: Task-deployment # <-------------------- Add the branch name to be deleted

