name: Main Deployment Pipeline


on:
 pull_request:
    branches:
      - main
    types: [closed]


jobs:


  validate-env:
    name: Load and Validate Environment Variables
    runs-on: ubuntu-latest

    steps:
      - name: Check environment variables
        run: |
          echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}"
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}"
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}"
          echo "DATASOURCE_DATABASE=${{ secrets.DATASOURCE_DATABASE }}"
          echo "DATABASE_URL"=${{ secrets.DATABASE_URL }}
          echo "APP_PORT=${{ secrets.APP_PORT }}"
          echo "VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}"
          echo "SWAGGER_PATH=${{ secrets.SWAGGER_PATH }}"
          # Add more checks as needed
        env:
          DATASOURCE_HOST: ${{ secrets.DATASOURCE_HOST }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          DATASOURCE_DATABASE: ${{ secrets.DATASOURCE_DATABASE }}
          APP_PORT: ${{ secrets.APP_PORT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_PREFIX: ${{ secrets.API_PREFIX }}
          # Add Swagger Variables
          MIT_LICENCE_URL: ${{ secrets.MIT_LICENCE_URL }}
          SWAGGER_SERVER: ${{ secrets.SWAGGER_SERVER }}
          SWAGGER_TITLE: ${{ secrets.SWAGGER_TITLE }}
          SWAGGER_PATH: ${{ secrets.SWAGGER_PATH }}
          # Add more environment variables here


  sonarcloud:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    needs: validate-env
    if: success() # Ensure the build is clean
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full depth is recommended for accurate SonarCloud analysis

      - name: Install dependencies
        run: yarn install

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=thegreatjordach
            -Dsonar.projectKey=TheGreatJordach_Task-Management-API-Backend-NestJS-
            -Dsonar.sources=src/
            -Dsonar.test.exclusions=**/*.spec.ts
            -Dsonar.tests=src/
            -Dsonar.verbose=true
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  setup:
    name: Setup | Neon workflow
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    steps:
      - name: Get Branch Name
        id: branch_name
        uses: tj-actions/branch-names@v8

  check_branch_exists:
    name: Check if Neon Branch Exists
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Check Neon Branch
        id: check_branch
        run: |
          BRANCH_NAME="neon-deployment-${{ needs.setup.outputs.branch }}"
          if neonctl branch list --project-id ${{ vars.NEON_PROJECT_ID }} | grep -q $BRANCH_NAME; then
            echo "Branch exists"
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "Branch does not exist"
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

  create_neon_branch:
    name: Create or Reuse Neon Branch for Deployment
    needs: [ setup, check_branch_exists ]
    if: env.branch_exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          username: "neondb_owner"
          parent: deployment
          branch_name: neon-deployment/${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run Migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"

  deploy_to_vercel:
    name: Deploy to Vercel
    needs: create_neon_branch
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./ # Adjust based on your project structure

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: deploy_to_vercel
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: yarn install

      - name: Generate documentation
        run: yarn run docs

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  delete_neon_branch:
    name: Delete Neon Branch
    needs: [ setup, create_neon_branch ]
    if: ${{ always() }} # Always run this job, regardless of previous job success
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        if: env.branch_exists == 'true'
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: neon-deployment-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  recreate_neon_branch:
    name: Recreate Neon Branch
    needs: delete_neon_branch
    if: failure() && env.branch_exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Recreate Neon Branch
        id: recreate_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          username: "neondb_owner"
          parent: deployment
          branch_name: neon-deployment/${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run Migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: "${{ steps.recreate_neon_branch.outputs.db_url_with_pooler }}"





